# Example YAML to get you started quickly.
# Be aware that YAML has indentation based scoping.
# Code completion support is available so start typing for available options.
swagger: '2.0'

# This is your document metadata
info:
  version: "0.0.0"
  title: APL LMS API
  description: |
    ### Entities and API definitions
    #### UNID
    UNID stands for _Unique Node Identifier_ — a unique string to find, fetch, associate with and identify by nodes. UNID is also a URI of its respective node. 
    #### Locale
    The _lingual locale_ that is used to recognize the language of learning materials. 
    #### Node
    The `Node` class represents learning node — a single indivisible waypoint in IMARD learning process. Somethig is a `Node` if it is a minimal specific achievable skill or a descrete obtainable knowledge. The `Node` class extends [`CreativeWork` class](http://schema.org/CreativeWork) 
    The fileds `dependsOn` and `translationOfWork` describe different relations between nodes:
    * `dependsOn` — \[URIs of IMARD nodes\] a certain degree of fluency in which is required for mastery of this node. This property is added onto an existing `CreativeWork` class;
    * `translationOfWork` — \[URIs of IMARD nodes\] of which this node is a localization. This property makes possible to suggest learnin materials for multilingual students.
    
    The main body of `Node` is a webpage that is accessible via `UNID`. The page may contain learning materials and media along with the glossary.
    #### Hierarchy
    `Hierarchy` is a tree of several interconnected instances of `Node` class described in [JSON Graph Forman (JGF)](http://jsongraphformat.info). Although a `Hierarchy` should be valid against the [JGF v3.0 Schema](http://jsongraphformat.info/child-schemas/bel-json-graph-3.0.schema.json) we provide an adjusted version of the same schema definitions here. Things to note in this:
     - Both `"dependsOn"` and `"localizes"` verbs are supported as `"relation"` options so we could support multilingual learning experience.

parameters:
  node-title:
    name: node-title
    description: Title of a learning node
    type: string
    in: path
    required: true

# Describe your paths here
paths:
  # This is a path endpoint. Change it.
  '/[node-uri]/meta':
    get:
      # Describe this verb here. Note: you can use markdown
      description: |
        Gets a single `Node` object that has a specified title.
      # Expected responses for this operation:
      responses:
        # Response code
        200:
          description: Successful response
          schema:
            type: object
            properties:
              node:
                $ref: "#/definitions/node"
        404:
          description: Node not found
          schema:
            $ref: "#/definitions/Error"
                
  '/[node-uri]/tree':
    get:
      description: |
        Gets a complete tree of `Node` objects with a root in a given node.
      responses:
        200:
          description: Successeful response
          schema:
            $ref: "#/definitions/hierarchy"
        404:
          description: Root node not found
          schema:
            $ref: "#/definitions/Error"
                  
definitions:
  UNID:
    title: Unique identificator
    description: URI of a IMARD learnin node
    type: string
  
  Date:
    title: Date
    type: object
    description: Instance of [Date](http://schema.org/Date) or [DateTime](http://schema.org/DateTime)
    
  node:
    title: IMARD learning node
    description: A single indivisible waypoint in IMARD learning process, inherits from [CreativeWork](http://schema.org/CreativeWork)
    type: object
    properties:
      id:
        $ref: "#/definitions/UNID"
      aggregateRating:
        type: object
        description: An instance of [AggregateRating](http://schema.org/AggregateRating)
      author:
        type: object
        description: An instance of [Person](http://schema.org/Person) or [Organization](http://schema.org/Organization)
      language:
        type: string
        description: language in which the publication is written, an instance of [Language](http://schema.org/Language) class
      encoding:
        type: string
        description: encoding
      name:
        type: string
        description: Briefly describes skill or knowledge obtainable by a student upon
          examining the node
      alternativeHeadline:
        type: string
        description: A secondary title
      about:
        type: string
        description: More thorough description of subjects and activities involved in
          node's materials
      accessMode:
        type: string
        description: The human sensory perceptual system or cognitive faculty through which a person may process or perceive information. Filled out automatically by AT
        enum:
          - auditory
          - tactile
          - textual
          - visual
          - colorDependent
          - chartOnVisual
          - chemOnVisual
          - diagramOnVisual
          - mathOnVisual
          - musicOnVisual
          - textOnVisual
      releaseEvent:
        type: object
        description: Describes an event when the module was released in the LMS — instance of [PublicationEvent](http://schema.org/PublicationEvent) class, `null` if the module has never been released
      dateCreated:
        $ref: "#/definitions/Date"
      datePublished:
        $ref: "#/definitions/Date"
      url:
        type: string
        description: URL of a remote VCS repo
      dependsOn:
        type: array
        description: Describes the set of modules a certain degree of fluency in which is required for mastering this one
        items:
          $ref: "#/definitions/UNID"
        maxItems: 4
      translationOfWork:
        type: array
        items:
          $ref: "#/definitions/UNID"
          
  node-relation:
    title: Node relation
    type: string
    description: Relation between two nodes in an APL tree
    enum:
      - dependsOn
      - translationOfWork
  
  graph: 
    title: Graph representation of an APL learning tree
    type: object
    properties:
      label:
        type: string
        title: Graph label
      directed:
        type: boolean
        description: | 
          Thells whether the graph is directed or not. APL trees are always directed.
        default: true
      type:
        type: string
        description: Type of a graph used
        default: APL tree
      items:
        type: array
        items:
          $ref: "#/definitions/node"
      edges:
        type: array
        items:
          type: object
          properties:
            source:
              $ref: "#/definitions/UNID"
            target:
              $ref: "#/definitions/UNID"
            relation:
              $ref: "#/definitions/node-relation"
          required:
            - source
            - target
            - relation
            
  
  hierarchy: 
    title: "APL nodes hierarchy"
    description: "An ordered set of waypoints of APL process"
    type: object
    additionalProperties: false
    properties: 
      graph: 
        "$ref": "#/definitions/graph"
    required: 
      - graph
      
  Error:
    properties:
      code:
        type: integer
        format: int32
      message:
        type: string
      fields:
        type:
           array
        items:
          type: string
    required:
      - code
      - message
      - fields
    additionalProperties: false